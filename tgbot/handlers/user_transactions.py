# - *- coding: utf- 8 - *-
import asyncio
import sqlite3
import json

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.data.config import ADMIN_ID, PATH_DATABASE, GROUP_ID
from tgbot.data.loader import dp
from tgbot.keyboards.inline_user import refill_bill_finl, refill_choice_finl
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite import update_userx, get_refillx, add_refillx, get_userx
from tgbot.utils.const_functions import get_date, get_unix
from tgbot.utils.misc_functions import send_admins
 

min_input_qiwi = 5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö

def getSettings():
    file = open("config.json", "r")
    data = json.loads(file.read())
    file.close()
    return data

def updateSettinsg(arg, value):
    get_settings = getSettings()
    get_settings[arg] = value
    result = get_settings
    saveSettings(result)

def saveSettings(arg):
    file = open("config.json", "wb")
    file.write(json.dumps(arg).encode("utf-8", "ignore"))
    file.close()


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="user_refill", state="*")
async def refill_way(call: CallbackQuery, state: FSMContext):
    get_kb = refill_choice_finl()

    if get_kb is not None:
        await call.message.edit_text("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n<b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</b>\n<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ - USDT TRC20</b>", reply_markup=get_kb)
    else:
        await call.answer("‚õî –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", True)


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text_startswith="refill_choice", state="*")
async def refill_way_choice(call: CallbackQuery, state: FSMContext):
    get_way = call.data.split(":")[1]

    await state.update_data(here_pay_way=get_way)

    await state.set_state("here_pay_amount")
    await call.message.edit_text("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö</b>")


###################################################################################
#################################### –í–í–û–î –°–£–ú–ú–´ ###################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ QIWI
@dp.message_handler(state="here_pay_amount")
async def refill_get(message: Message, state: FSMContext):
    settings = getSettings()

    if message.text.isdigit():
        cache_message = await message.answer("<b>‚ôª –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–ª–∞—Ç—ë–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</b>")
        pay_amount = int(message.text)

        if min_input_qiwi <= pay_amount <= 300000:
            get_way = (await state.get_data())['here_pay_way']
            await state.finish()

            if get_way == "Bitcoin":
                await message.answer(f"\
               \n<b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüìû USDT –∫–æ—à–µ–ª—ë–∫: <code>{settings['bitcoin']}</code>\
               \nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}</code>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>\
                ", reply_markup=refill_bill_finl("https://test.com", get_way, pay_amount))
            elif get_way == "Qiwi":
                await message.answer(f"\
               \n<b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüìû QIWI –∫–æ—à–µ–ª—ë–∫: <code>{settings['qiwi']}</code>\
               \nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}‚ÇΩ</code>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>\
                ", reply_markup=refill_bill_finl("https://test.com", get_way, pay_amount))
            elif get_way == "Card":
                await message.answer(f"\
               \n<b>üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüìû –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: <code>{settings['card']}</code>\
               \nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{pay_amount}‚ÇΩ</code>\
               \n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\
               \nüîÑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <code>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</code>\
                ", reply_markup=refill_bill_finl("https://test.com", get_way, pay_amount))
        else:
            await cache_message.edit_text(f"<b>‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n"
                                          f"‚ñ∂ C—É–º–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>{min_input_qiwi}‚ÇΩ</code> –∏ –±–æ–ª—å—à–µ <code>300 000‚ÇΩ</code>\n"
                                          f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
    else:
        await message.answer("<b>‚ùå –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.</b>\n"
                             "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")


###################################################################################
################################ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ################################
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É
@dp.callback_query_handler(text_startswith="Pay:")
async def refill_check_form(call: CallbackQuery, state: FSMContext):
    _, get_way, pay_amount = call.data.split(':')
    with sqlite3.connect(PATH_DATABASE) as con:
        referer_info = con.execute(f"SELECT * FROM referral_system WHERE user_id=?", (call.from_user.id, )).fetchone()
        print(referer_info)
        full = referer_info[2]
        asyncio.create_task(
            call.bot.send_message(ADMIN_ID, f"–ö–ª–∏–µ–Ω—Ç —Å–æ–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É!\n–ö–ª–∏–µ–Ω—Ç   : @{call.from_user.username} [id<code>{call.from_user.id}</code>]\n"\
                f"–†–µ—Ñ–µ—Ä: @{full} (<a href=\"tg://user?id={referer_info[1]}\">{referer_info[1]}</a>) \n–°—É–º–º–∞: {pay_amount}"
                )
        )
        asyncio.create_task(
            call.bot.send_message(GROUP_ID, f"–ö–ª–∏–µ–Ω—Ç —Å–æ–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É!\n–ö–ª–∏–µ–Ω—Ç   : @{call.from_user.username} [id<code>{call.from_user.id}</code>]\n"\
                f"–†–µ—Ñ–µ—Ä: @{full} (<a href=\"tg://user?id={referer_info[1]}\">{referer_info[1]}</a>) \n–°—É–º–º–∞: {pay_amount}"
                )
        )
    await call.bot.send_message(call.from_user.id, f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:")
    await state.set_state("get_receipt")

@dp.message_handler(state="get_receipt", content_types=['photo'])
async def get_receipt(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await message.bot.send_photo(chat_id=ADMIN_ID, photo=photo)
    await message.bot.send_photo(chat_id=GROUP_ID, photo=photo)
    await message.answer("‚åõ –û–∂–∏–¥–∞–π—Ç–µ. –° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    await state.finish()


##########################################################################################
######################################### –ü–†–û–ß–ï–ï #########################################
# –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def refill_success(call: CallbackQuery, receipt, amount, get_way):
    get_user = get_userx(user_id=call.from_user.id)

    add_refillx(get_user['user_id'], get_user['user_login'], get_user['user_name'], receipt,
                amount, receipt, get_way, get_date(), get_unix())

    update_userx(call.from_user.id,
                 user_balance=get_user['user_balance'] + amount,
                 user_refill=get_user['user_refill'] + amount)

    await call.message.edit_text(f"<b>üí∞ –í—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É <code>{amount}‚ÇΩ</code>. –£–¥–∞—á–∏ ‚ù§\n"
                                 f"üßæ –ß–µ–∫: <code>#{receipt}</code></b>")
    
    await send_admins(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{get_user['user_login']}</b> | <a href='tg://user?id={get_user['user_id']}'>{get_user['user_name']}</a> | <code>{get_user['user_id']}</code>\n"
        f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{amount}‚ÇΩ</code>\n"
        f"üßæ –ß–µ–∫: <code>#{receipt}</code>"
    )
